pipeline {
	agent any
	// parameters {
    //     string(name: 'BASE_TAG', defaultValue: 'coalmineadmin/projectone-portal:master_071017_154734_1', description: 'The base docker tag that the docker testing needs to build from.')
    // }
	 stages {         
		 stage('Set Tagging') {      
			steps {      
			sh '''
					m_time=`date +"%m%d%y_%H%M%S"`          
					repo=projectone-portal
					group=iot-platform
					params_file=params.groovy
					echo "env.m_time='$m_time'" > ${params_file}          
					echo "env.m_comp_tag='${BRANCH_NAME}_${m_time}_${BUILD_NUMBER}'" >> ${params_file}                              
					# echo "env.docker_ws='/usr/local/lib/node_modules/${repo}'" >> ${params_file} 
					echo "env.docker_name='$repo_${BRANCH_NAME}_${BUILD_NUMBER}'" >> ${params_file}
					echo "env.docker_image_name='${REPOSITORY_NAME}/$repo:${BRANCH_NAME}_${m_time}_${BUILD_NUMBER}'" >> ${params_file}
					# echo "env.docker_test_image_name='testing/$repo:${BRANCH_NAME}_${m_time}_${BUILD_NUMBER}'" >> ${params_file} */
					echo "env.repo='$repo'"  >> ${params_file}
					echo "env.repo_url='github.com/${group}/${repo}'" >> ${params_file}                  
				'''
				load "params.groovy"
			 }       
		 }   
		stage('Github Checkout') {
			steps {
			 checkout scm
			}
		}
		// stage('Building testing docker image') {
		// 	steps {
		// 		withEnv(["BaseTag=${params.BASE_TAG}","DockerTestImageName=${env.docker_test_image_name}"]){ 
        //   			sh "sed 's|/__IMAGE__/|'${BaseTag}'|g' docker/Dockerfile.testing.template > docker/Dockerfile.testing"
		// 			// sh 'sed "s/__IMAGE__/${InfraTag}/;s/__REPOSITORY__/${repoName}/" Dockerfile.testing.template > Dockerfile.testing'      
		// 			sh 'docker build --no-cache -t $DockerTestImageName -f docker/Dockerfile.testing .'
		// 		}
		// 	}
		// }
		// stage('Run unit testing') {
		// 	steps {
		// 		withEnv(["DockerTestImageName=${env.docker_test_image_name}"]){
		// 			sh './docker/runUnitTests.sh $DockerTestImageName $BRANCH_NAME $repo $WORKSPACE'
		// 		}

		// 		junit healthScaleFactor: 10.0, testResults: 'reports/junit/Phantom*/*.xml'
		// 		publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'reports/remap/html-report', reportFiles: 'index.html', reportName: 'Code Coverage', reportTitles: ''])
		// 	}
		// }
		// // deploy to staging
		// stage('Run E2E testing') {
		// 	steps {
		// 		withEnv(["DockerTestImageName=${env.docker_test_image_name}"]){
		// 			sh './docker/runE2E.sh $DockerTestImageName $BRANCH_NAME $repo $WORKSPACE'
		// 		}

		// 		junit healthScaleFactor: 10.0, testResults: 'reports/e2e-junit/*.xml'
		// 		publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'reports/screenshots', reportFiles: 'report.html', reportName: 'E2E Testing', reportTitles: ''])
		// 	}
		// }
		stage('Build Image') {            
			steps {   
				withEnv(["DockerImageName=${env.docker_image_name}"]){
					sh 'docker build --no-cache -t $DockerImageName -f config/docker/Dockerfile .'
					sh 'docker push $DockerImageName'
					echo 'Image $DockerImageName pushed succesfully' 
				}
			}
		}
		// Deploy to Production
		 stage('Tag at github') {       
			 steps {  
				 withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'id',usernameVariable: 'GIT_USERNAME',passwordVariable: 'GIT_PASSWORD']]){                           
					 withEnv(["tag=${env.m_comp_tag}","time=${env.m_time}","repo_url=${env.repo_url}",
								"branch_name=${env.BRANCH_NAME}","build_number=${env.BUILD_NUMBER}"]){
						 sh '''                
							git tag -a ${tag} -m 'Generated by Jenkins2'
							git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${repo_url} --tags
						 '''         
				 }
			 }
			}
		 }
	 }
	 post {
		 always {			 
			 withEnv(["DockerImageName=${env.docker_image_name}"]){
				 sh 'docker rmi -f $DockerImageName'
			 }       
		 }
	 }
 }